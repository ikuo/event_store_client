# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: persistent.proto

require 'google/protobuf'

require_relative 'shared_pb'

Google::Protobuf::DescriptorPool.generated_pool.build do
  add_file("persistent.proto", :syntax => :proto3) do
    add_message "event_store.client.persistent_subscriptions.ReadReq" do
      oneof :content do
        optional :options, :message, 1, "event_store.client.persistent_subscriptions.ReadReq.Options"
        optional :ack, :message, 2, "event_store.client.persistent_subscriptions.ReadReq.Ack"
        optional :nack, :message, 3, "event_store.client.persistent_subscriptions.ReadReq.Nack"
      end
    end
    add_message "event_store.client.persistent_subscriptions.ReadReq.Options" do
      optional :group_name, :string, 2
      optional :buffer_size, :int32, 3
      optional :uuid_option, :message, 4, "event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption"
      oneof :stream_option do
        optional :stream_identifier, :message, 1, "event_store.client.StreamIdentifier"
        optional :all, :message, 5, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption" do
      oneof :content do
        optional :structured, :message, 1, "event_store.client.Empty"
        optional :string, :message, 2, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.ReadReq.Ack" do
      optional :id, :bytes, 1
      repeated :ids, :message, 2, "event_store.client.UUID"
    end
    add_message "event_store.client.persistent_subscriptions.ReadReq.Nack" do
      optional :id, :bytes, 1
      repeated :ids, :message, 2, "event_store.client.UUID"
      optional :action, :enum, 3, "event_store.client.persistent_subscriptions.ReadReq.Nack.Action"
      optional :reason, :string, 4
    end
    add_enum "event_store.client.persistent_subscriptions.ReadReq.Nack.Action" do
      value :Unknown, 0
      value :Park, 1
      value :Retry, 2
      value :Skip, 3
      value :Stop, 4
    end
    add_message "event_store.client.persistent_subscriptions.ReadResp" do
      oneof :content do
        optional :event, :message, 1, "event_store.client.persistent_subscriptions.ReadResp.ReadEvent"
        optional :subscription_confirmation, :message, 2, "event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation"
      end
    end
    add_message "event_store.client.persistent_subscriptions.ReadResp.ReadEvent" do
      optional :event, :message, 1, "event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent"
      optional :link, :message, 2, "event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent"
      oneof :position do
        optional :commit_position, :uint64, 3
        optional :no_position, :message, 4, "event_store.client.Empty"
      end
      oneof :count do
        optional :retry_count, :int32, 5
        optional :no_retry_count, :message, 6, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent" do
      optional :id, :message, 1, "event_store.client.UUID"
      optional :stream_identifier, :message, 2, "event_store.client.StreamIdentifier"
      optional :stream_revision, :uint64, 3
      optional :prepare_position, :uint64, 4
      optional :commit_position, :uint64, 5
      map :metadata, :string, :string, 6
      optional :custom_metadata, :bytes, 7
      optional :data, :bytes, 8
    end
    add_message "event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation" do
      optional :subscription_id, :string, 1
    end
    add_message "event_store.client.persistent_subscriptions.CreateReq" do
      optional :options, :message, 1, "event_store.client.persistent_subscriptions.CreateReq.Options"
    end
    add_message "event_store.client.persistent_subscriptions.CreateReq.Options" do
      optional :stream_identifier, :message, 1, "event_store.client.StreamIdentifier"
      optional :group_name, :string, 2
      optional :settings, :message, 3, "event_store.client.persistent_subscriptions.CreateReq.Settings"
      oneof :stream_option do
        optional :stream, :message, 4, "event_store.client.persistent_subscriptions.CreateReq.StreamOptions"
        optional :all, :message, 5, "event_store.client.persistent_subscriptions.CreateReq.AllOptions"
      end
    end
    add_message "event_store.client.persistent_subscriptions.CreateReq.StreamOptions" do
      optional :stream_identifier, :message, 1, "event_store.client.StreamIdentifier"
      oneof :revision_option do
        optional :revision, :uint64, 2
        optional :start, :message, 3, "event_store.client.Empty"
        optional :end, :message, 4, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.CreateReq.AllOptions" do
      oneof :all_option do
        optional :position, :message, 1, "event_store.client.persistent_subscriptions.CreateReq.Position"
        optional :start, :message, 2, "event_store.client.Empty"
        optional :end, :message, 3, "event_store.client.Empty"
      end
      oneof :filter_option do
        optional :filter, :message, 4, "event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions"
        optional :no_filter, :message, 5, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions" do
      optional :checkpointIntervalMultiplier, :uint32, 5
      oneof :filter do
        optional :stream_identifier, :message, 1, "event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression"
        optional :event_type, :message, 2, "event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression"
      end
      oneof :window do
        optional :max, :uint32, 3
        optional :count, :message, 4, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression" do
      optional :regex, :string, 1
      repeated :prefix, :string, 2
    end
    add_message "event_store.client.persistent_subscriptions.CreateReq.Position" do
      optional :commit_position, :uint64, 1
      optional :prepare_position, :uint64, 2
    end
    add_message "event_store.client.persistent_subscriptions.CreateReq.Settings" do
      optional :resolve_links, :bool, 1
      optional :revision, :uint64, 2
      optional :extra_statistics, :bool, 3
      optional :max_retry_count, :int32, 5
      optional :min_checkpoint_count, :int32, 7
      optional :max_checkpoint_count, :int32, 8
      optional :max_subscriber_count, :int32, 9
      optional :live_buffer_size, :int32, 10
      optional :read_batch_size, :int32, 11
      optional :history_buffer_size, :int32, 12
      optional :named_consumer_strategy, :enum, 13, "event_store.client.persistent_subscriptions.CreateReq.ConsumerStrategy"
      optional :consumer_strategy, :string, 16
      oneof :message_timeout do
        optional :message_timeout_ticks, :int64, 4
        optional :message_timeout_ms, :int32, 14
      end
      oneof :checkpoint_after do
        optional :checkpoint_after_ticks, :int64, 6
        optional :checkpoint_after_ms, :int32, 15
      end
    end
    add_enum "event_store.client.persistent_subscriptions.CreateReq.ConsumerStrategy" do
      value :DispatchToSingle, 0
      value :RoundRobin, 1
      value :Pinned, 2
    end
    add_message "event_store.client.persistent_subscriptions.CreateResp" do
    end
    add_message "event_store.client.persistent_subscriptions.UpdateReq" do
      optional :options, :message, 1, "event_store.client.persistent_subscriptions.UpdateReq.Options"
    end
    add_message "event_store.client.persistent_subscriptions.UpdateReq.Options" do
      optional :stream_identifier, :message, 1, "event_store.client.StreamIdentifier"
      optional :group_name, :string, 2
      optional :settings, :message, 3, "event_store.client.persistent_subscriptions.UpdateReq.Settings"
      oneof :stream_option do
        optional :stream, :message, 4, "event_store.client.persistent_subscriptions.UpdateReq.StreamOptions"
        optional :all, :message, 5, "event_store.client.persistent_subscriptions.UpdateReq.AllOptions"
      end
    end
    add_message "event_store.client.persistent_subscriptions.UpdateReq.StreamOptions" do
      optional :stream_identifier, :message, 1, "event_store.client.StreamIdentifier"
      oneof :revision_option do
        optional :revision, :uint64, 2
        optional :start, :message, 3, "event_store.client.Empty"
        optional :end, :message, 4, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.UpdateReq.AllOptions" do
      oneof :all_option do
        optional :position, :message, 1, "event_store.client.persistent_subscriptions.UpdateReq.Position"
        optional :start, :message, 2, "event_store.client.Empty"
        optional :end, :message, 3, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.UpdateReq.Position" do
      optional :commit_position, :uint64, 1
      optional :prepare_position, :uint64, 2
    end
    add_message "event_store.client.persistent_subscriptions.UpdateReq.Settings" do
      optional :resolve_links, :bool, 1
      optional :revision, :uint64, 2
      optional :extra_statistics, :bool, 3
      optional :max_retry_count, :int32, 5
      optional :min_checkpoint_count, :int32, 7
      optional :max_checkpoint_count, :int32, 8
      optional :max_subscriber_count, :int32, 9
      optional :live_buffer_size, :int32, 10
      optional :read_batch_size, :int32, 11
      optional :history_buffer_size, :int32, 12
      optional :named_consumer_strategy, :enum, 13, "event_store.client.persistent_subscriptions.UpdateReq.ConsumerStrategy"
      oneof :message_timeout do
        optional :message_timeout_ticks, :int64, 4
        optional :message_timeout_ms, :int32, 14
      end
      oneof :checkpoint_after do
        optional :checkpoint_after_ticks, :int64, 6
        optional :checkpoint_after_ms, :int32, 15
      end
    end
    add_enum "event_store.client.persistent_subscriptions.UpdateReq.ConsumerStrategy" do
      value :DispatchToSingle, 0
      value :RoundRobin, 1
      value :Pinned, 2
    end
    add_message "event_store.client.persistent_subscriptions.UpdateResp" do
    end
    add_message "event_store.client.persistent_subscriptions.DeleteReq" do
      optional :options, :message, 1, "event_store.client.persistent_subscriptions.DeleteReq.Options"
    end
    add_message "event_store.client.persistent_subscriptions.DeleteReq.Options" do
      optional :group_name, :string, 2
      oneof :stream_option do
        optional :stream_identifier, :message, 1, "event_store.client.StreamIdentifier"
        optional :all, :message, 3, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.DeleteResp" do
    end
    add_message "event_store.client.persistent_subscriptions.GetInfoReq" do
      optional :options, :message, 1, "event_store.client.persistent_subscriptions.GetInfoReq.Options"
    end
    add_message "event_store.client.persistent_subscriptions.GetInfoReq.Options" do
      optional :group_name, :string, 3
      oneof :stream_option do
        optional :stream_identifier, :message, 1, "event_store.client.StreamIdentifier"
        optional :all, :message, 2, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.GetInfoResp" do
      optional :subscription_info, :message, 1, "event_store.client.persistent_subscriptions.SubscriptionInfo"
    end
    add_message "event_store.client.persistent_subscriptions.SubscriptionInfo" do
      optional :event_source, :string, 1
      optional :group_name, :string, 2
      optional :status, :string, 3
      repeated :connections, :message, 4, "event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo"
      optional :average_per_second, :int32, 5
      optional :total_items, :int64, 6
      optional :count_since_last_measurement, :int64, 7
      optional :last_checkpointed_event_position, :string, 8
      optional :last_known_event_position, :string, 9
      optional :resolve_link_tos, :bool, 10
      optional :start_from, :string, 11
      optional :message_timeout_milliseconds, :int32, 12
      optional :extra_statistics, :bool, 13
      optional :max_retry_count, :int32, 14
      optional :live_buffer_size, :int32, 15
      optional :buffer_size, :int32, 16
      optional :read_batch_size, :int32, 17
      optional :check_point_after_milliseconds, :int32, 18
      optional :min_check_point_count, :int32, 19
      optional :max_check_point_count, :int32, 20
      optional :read_buffer_count, :int32, 21
      optional :live_buffer_count, :int64, 22
      optional :retry_buffer_count, :int32, 23
      optional :total_in_flight_messages, :int32, 24
      optional :outstanding_messages_count, :int32, 25
      optional :named_consumer_strategy, :string, 26
      optional :max_subscriber_count, :int32, 27
      optional :parked_message_count, :int64, 28
    end
    add_message "event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo" do
      optional :from, :string, 1
      optional :username, :string, 2
      optional :average_items_per_second, :int32, 3
      optional :total_items, :int64, 4
      optional :count_since_last_measurement, :int64, 5
      repeated :observed_measurements, :message, 6, "event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement"
      optional :available_slots, :int32, 7
      optional :in_flight_messages, :int32, 8
      optional :connection_name, :string, 9
    end
    add_message "event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement" do
      optional :key, :string, 1
      optional :value, :int64, 2
    end
    add_message "event_store.client.persistent_subscriptions.ReplayParkedReq" do
      optional :options, :message, 1, "event_store.client.persistent_subscriptions.ReplayParkedReq.Options"
    end
    add_message "event_store.client.persistent_subscriptions.ReplayParkedReq.Options" do
      optional :group_name, :string, 1
      oneof :stream_option do
        optional :stream_identifier, :message, 2, "event_store.client.StreamIdentifier"
        optional :all, :message, 3, "event_store.client.Empty"
      end
      oneof :stop_at_option do
        optional :stop_at, :int64, 4
        optional :no_limit, :message, 5, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.ReplayParkedResp" do
    end
    add_message "event_store.client.persistent_subscriptions.ListReq" do
      optional :options, :message, 1, "event_store.client.persistent_subscriptions.ListReq.Options"
    end
    add_message "event_store.client.persistent_subscriptions.ListReq.Options" do
      oneof :list_option do
        optional :list_all_subscriptions, :message, 1, "event_store.client.Empty"
        optional :list_for_stream, :message, 2, "event_store.client.persistent_subscriptions.ListReq.StreamOption"
      end
    end
    add_message "event_store.client.persistent_subscriptions.ListReq.StreamOption" do
      oneof :stream_option do
        optional :stream, :message, 1, "event_store.client.StreamIdentifier"
        optional :all, :message, 2, "event_store.client.Empty"
      end
    end
    add_message "event_store.client.persistent_subscriptions.ListResp" do
      repeated :subscriptions, :message, 1, "event_store.client.persistent_subscriptions.SubscriptionInfo"
    end
  end
end

module EventStore
  module Client
    module PersistentSubscriptions
      ReadReq = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReadReq").msgclass
      ReadReq::Options = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReadReq.Options").msgclass
      ReadReq::Options::UUIDOption = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReadReq.Options.UUIDOption").msgclass
      ReadReq::Ack = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReadReq.Ack").msgclass
      ReadReq::Nack = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReadReq.Nack").msgclass
      ReadReq::Nack::Action = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReadReq.Nack.Action").enummodule
      ReadResp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReadResp").msgclass
      ReadResp::ReadEvent = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReadResp.ReadEvent").msgclass
      ReadResp::ReadEvent::RecordedEvent = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReadResp.ReadEvent.RecordedEvent").msgclass
      ReadResp::SubscriptionConfirmation = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReadResp.SubscriptionConfirmation").msgclass
      CreateReq = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.CreateReq").msgclass
      CreateReq::Options = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.CreateReq.Options").msgclass
      CreateReq::StreamOptions = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.CreateReq.StreamOptions").msgclass
      CreateReq::AllOptions = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.CreateReq.AllOptions").msgclass
      CreateReq::AllOptions::FilterOptions = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions").msgclass
      CreateReq::AllOptions::FilterOptions::Expression = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.CreateReq.AllOptions.FilterOptions.Expression").msgclass
      CreateReq::Position = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.CreateReq.Position").msgclass
      CreateReq::Settings = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.CreateReq.Settings").msgclass
      CreateReq::ConsumerStrategy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.CreateReq.ConsumerStrategy").enummodule
      CreateResp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.CreateResp").msgclass
      UpdateReq = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.UpdateReq").msgclass
      UpdateReq::Options = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.UpdateReq.Options").msgclass
      UpdateReq::StreamOptions = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.UpdateReq.StreamOptions").msgclass
      UpdateReq::AllOptions = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.UpdateReq.AllOptions").msgclass
      UpdateReq::Position = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.UpdateReq.Position").msgclass
      UpdateReq::Settings = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.UpdateReq.Settings").msgclass
      UpdateReq::ConsumerStrategy = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.UpdateReq.ConsumerStrategy").enummodule
      UpdateResp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.UpdateResp").msgclass
      DeleteReq = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.DeleteReq").msgclass
      DeleteReq::Options = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.DeleteReq.Options").msgclass
      DeleteResp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.DeleteResp").msgclass
      GetInfoReq = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.GetInfoReq").msgclass
      GetInfoReq::Options = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.GetInfoReq.Options").msgclass
      GetInfoResp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.GetInfoResp").msgclass
      SubscriptionInfo = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.SubscriptionInfo").msgclass
      SubscriptionInfo::ConnectionInfo = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.SubscriptionInfo.ConnectionInfo").msgclass
      SubscriptionInfo::Measurement = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.SubscriptionInfo.Measurement").msgclass
      ReplayParkedReq = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReplayParkedReq").msgclass
      ReplayParkedReq::Options = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReplayParkedReq.Options").msgclass
      ReplayParkedResp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ReplayParkedResp").msgclass
      ListReq = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ListReq").msgclass
      ListReq::Options = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ListReq.Options").msgclass
      ListReq::StreamOption = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ListReq.StreamOption").msgclass
      ListResp = ::Google::Protobuf::DescriptorPool.generated_pool.lookup("event_store.client.persistent_subscriptions.ListResp").msgclass
    end
  end
end
