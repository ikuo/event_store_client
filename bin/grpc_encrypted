#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'event_store_client'
class EncryptedEvent < EventStoreClient::DeserializedEvent
  def schema
    Dry::Schema.Params do
      required(:user_id).value(:string)
      required(:first_name).value(:string)
      required(:last_name).value(:string)
      required(:profession).value(:string)
    end
  end

  def self.encryption_schema
    {
      key: ->(data) { data[:user_id] },
      attributes: %i[first_name last_name]
    }
  end
end

require 'yousty-encryptor'
Yousty::Encryptor.configure do |config|
  config.url = 'http://encryptor:3000'
end


EventStoreClient.configure do |config|
  config.eventstore_url = 'https://eventstoredb:2113'
  config.adapter_type = :grpc
  config.verify_ssl = false

  config.eventstore_user = 'admin'
  config.eventstore_password = 'changeit'

  config.service_name = 'default'
  token ='eyJhbGciOiJFRDI1NTE5In0.eyJzY29wZXMiOlsiZW5jcnlwdG9yIl0sImV4cCI6NDczOTU1NjAwMX0.bkRS3TUqahTAh_BfAivfHFLfRu0pVeENFPqwLgT6Bx-P-E7tXvkmcP-WEr6WZ1C6T1rKONtG2iehMHL5KA2mDg'
  key_repository = Yousty::Encryptor::Client.new(
    token
  )
  config.mapper = EventStoreClient::Mapper::Encrypted.new(key_repository)
end

require_relative './adapters_test_run'

stream = 'newstream3'
client = EventStoreClient.adapter
# AdaptersTestRun.new(client, stream: stream).call

count = 2
encr = Array.new(count) do
  EncryptedEvent.new(
    data: { user_id: SecureRandom.uuid, profession: 'Makumba', first_name: 'John', last_name: 'Doe' }
  )
end

encr.map { |event| client.append_to_stream(stream, [event]) }
pp client.read_all_from_stream(stream).value!
