#!/usr/bin/env ruby
# frozen_string_literal: true

# USAGE:
# docker build -t yousty/esc:test
# gem install docker-sync
# docker-sync start && docker-compose up -d
# docker-compose exec specs bash
# bin/console
#
require 'bundler/setup'
require 'event_store_client'
require 'irb'
require 'pry'

EventStoreClient.configure do |config|
  ## url needs to match the DNS name in certificate
  config.eventstore_url = ENV.fetch('EVENTSTORE_URL') { 'http://localhost:2113' }
  config.adapter_type = :grpc
  config.eventstore_user = ENV.fetch('EVENTSTORE_USER') { 'admin' }
  config.eventstore_password = ENV.fetch('EVENTSTORE_PASSWORD') { 'changeit' }
  config.verify_ssl = false
  config.insecure = true
  config.per_page = 1000
end

def check_stream
  config = EventStoreClient.config

  credentials = Base64.encode64("#{config.eventstore_user}:#{config.eventstore_password}")
  metadata = { 'authorization' => "Basic #{credentials.gsub("\n", '')}" }

  uri = config.eventstore_url
  service = EventStore::Client::Streams::Streams::Stub.new(
    "#{uri.host}:#{uri.port}",
    :this_channel_is_insecure
  )

  opts = {
    stream: { stream_identifier: { stream_name: 'nestream' }, start: {} },
    read_direction: :Forwards,
    resolve_links: true,
    count: 20,
    uuid_option: { string: {} },
    no_filter: {}
  }

  puts service.read(EventStore::Client::Streams::ReadReq.new(options: opts), metadata: metadata).inspect
end

IRB.start(__FILE__)
